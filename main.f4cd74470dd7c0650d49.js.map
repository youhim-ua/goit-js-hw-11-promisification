{"version":3,"sources":["webpack:///./js/delay-1.js","webpack:///./js/toggle-users-2.js","webpack:///./js/transaction-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","rejected","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GAAE,OAAI,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,YAAW,kBAAMD,EAAQF,KAAKA,OAEnEI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCPXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAAX,OACtB,IAAIb,SAAQ,SAAAC,GAAO,OACjBA,EAAQW,EAASE,KAAI,SAAAC,GAAI,OAAIA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAGxFZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAU7CL,EAAgBH,EAAO,SAASD,KAAKJ,GAErCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCxBnC,IAGMe,EAAkB,SAAAC,GACpB,IAJ+BC,EAAKC,EAI9BvB,GAJyBsB,EAIS,IAJJC,EAIS,IAH7CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAI7C,OAAO,IAAIpB,SAAQ,SAACC,EAASwB,GACzBvB,YAAW,WAEP,OADmBoB,KAAKE,SAAW,GACfvB,EAAQ,CAACkB,EAAYO,GAAI5B,IAAU2B,EAASN,EAAYO,MAC7E5B,OAIL6B,EAAa,SAAC,GAAD,IAAED,EAAF,KAAMtB,EAAN,YACfC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,SAEEwB,EAAW,SAAAF,GAAE,OACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAYJR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACHI,MAAMH,GAEXV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.f4cd74470dd7c0650d49.js","sourcesContent":["const delay = ms => new Promise(resolve => setTimeout(() => resolve(ms), ms));\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => \r\n  new Promise(resolve =>\r\n    resolve(allUsers.map(user => user.name === userName ? { ...user, active: !user.active } : user))\r\n  );\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n* Сейчас работает так\r\n*/\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n/*\r\n* Должно работать так\r\n*/\r\ntoggleUserState(users, 'Mango').then(logger);\r\n\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) =>\r\n    Math.floor(Math.random() * (max - min + 1) + min);\r\n\r\nconst makeTransaction = transaction => {\r\n    const delay = randomIntegerFromInterval(200, 500); \r\n    return new Promise((resolve, rejected) => {\r\n        setTimeout(() => {            \r\n            const canProcess = Math.random() > 0.3; \r\n            return canProcess ? resolve([transaction.id, delay]) : rejected(transaction.id);\r\n        }, delay);\r\n    })\r\n};\r\n\r\nconst logSuccess = ([id, time]) =>\r\n    console.log(`Transaction ${id} processed in ${time} ms.`);\r\n\r\nconst logError = id =>\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n\r\n/*\r\n* Работает так\r\n*/\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n* Должно работать так\r\n*/\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n \r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n    .catch(logError);\r\n  \r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}